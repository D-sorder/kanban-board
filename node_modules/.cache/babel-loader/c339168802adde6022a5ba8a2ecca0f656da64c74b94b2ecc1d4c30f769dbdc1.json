{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\kanban\\\\src\\\\components\\\\List.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useState } from 'react';\nimport { List_Types } from \"./List_Types\";\nimport Form from \"./Form.js\";\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst List = props => {\n  _s();\n  const {\n    type,\n    title,\n    tasks,\n    addNewTask\n  } = props;\n  const [isFormVisible, setFormVisible] = useState(false);\n  const handleAddNewClick = () => {\n    setFormVisible(!isFormVisible);\n  };\n  const formSubmit = (title, description) => {\n    addNewTask(title, description);\n    setFormVisible(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"task_card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"task_name\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }, this), tasks.length ? tasks.map(task => /*#__PURE__*/_jsxDEV(Link, {\n      to: `/tasks/${task.id}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task\",\n        children: task.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 6\n    }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No tasks added yet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }, this), type === List_Types.Backlog && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddNewClick,\n      className: \"addButton\",\n      children: \"+ Add new task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 36\n    }, this), type === List_Types.Backlog && isFormVisible && /*#__PURE__*/_jsxDEV(Form, {\n      formSubmit: formSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n};\n_s(List, \"b/hl7pAON75E098KU5MUzMu8cYA=\");\n_c = List;\nexport default List;\nvar _c;\n$RefreshReg$(_c, \"List\");","map":{"version":3,"names":["React","useState","List_Types","Form","Link","jsxDEV","_jsxDEV","List","props","_s","type","title","tasks","addNewTask","isFormVisible","setFormVisible","handleAddNewClick","formSubmit","description","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","task","to","id","Backlog","onClick","_c","$RefreshReg$"],"sources":["D:/projects/kanban/src/components/List.js"],"sourcesContent":["import React from \"react\";\r\nimport { useState } from 'react';\r\nimport { List_Types } from \"./List_Types\";\r\nimport Form from \"./Form.js\"\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst List = (props) => {\r\n    const {type, title, tasks, addNewTask} = props;\r\n\tconst [isFormVisible, setFormVisible] = useState(false);\r\n    const handleAddNewClick = () => {\r\n\t\tsetFormVisible(!isFormVisible)\r\n\t}\r\n\r\n\tconst formSubmit = (title, description) => {\r\n\t\taddNewTask(title, description)\r\n\t\tsetFormVisible(false)\r\n\t}\r\n\r\n\r\n    return (\r\n        <div className=\"task_card\">\r\n           <h2 className=\"task_name\">{title}</h2>\r\n\t\t\t{tasks.length? \r\n\t\t\t\ttasks.map(task =>\r\n\t\t\t\t\t<Link  to={`/tasks/${task.id}`}>\r\n\t\t\t\t\t\t<div className=\"task\" >{task.title}</div>\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t\t\r\n\t\t\t) : \r\n\t\t\t\t<p>No tasks added yet</p>\r\n\t\t\t}\r\n\t\t\t{type === List_Types.Backlog && <button onClick={handleAddNewClick} className=\"addButton\">+ Add new task</button>}\r\n\t\t\t{type === List_Types.Backlog && isFormVisible && (\r\n\t\t\t\t<Form formSubmit={formSubmit} />\r\n                )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default List;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,UAAU,QAAQ,cAAc;AACzC,OAAOC,IAAI,MAAM,WAAW;AAC5B,SAASC,IAAI,QAAQ,kBAAkB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,IAAI,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACpB,MAAM;IAACC,IAAI;IAAEC,KAAK;IAAEC,KAAK;IAAEC;EAAU,CAAC,GAAGL,KAAK;EACjD,MAAM,CAACM,aAAa,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EACpD,MAAMe,iBAAiB,GAAGA,CAAA,KAAM;IAClCD,cAAc,CAAC,CAACD,aAAa,CAAC;EAC/B,CAAC;EAED,MAAMG,UAAU,GAAGA,CAACN,KAAK,EAAEO,WAAW,KAAK;IAC1CL,UAAU,CAACF,KAAK,EAAEO,WAAW,CAAC;IAC9BH,cAAc,CAAC,KAAK,CAAC;EACtB,CAAC;EAGE,oBACIT,OAAA;IAAKa,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACvBd,OAAA;MAAIa,SAAS,EAAC,WAAW;MAAAC,QAAA,EAAET;IAAK;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAC7CZ,KAAK,CAACa,MAAM,GACZb,KAAK,CAACc,GAAG,CAACC,IAAI,iBACbrB,OAAA,CAACF,IAAI;MAAEwB,EAAE,EAAE,UAAUD,IAAI,CAACE,EAAE,EAAG;MAAAT,QAAA,eAC9Bd,OAAA;QAAKa,SAAS,EAAC,MAAM;QAAAC,QAAA,EAAGO,IAAI,CAAChB;MAAK;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC,CAER,CAAC,gBACAlB,OAAA;MAAAc,QAAA,EAAG;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EAEzBd,IAAI,KAAKR,UAAU,CAAC4B,OAAO,iBAAIxB,OAAA;MAAQyB,OAAO,EAAEf,iBAAkB;MAACG,SAAS,EAAC,WAAW;MAAAC,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAChHd,IAAI,KAAKR,UAAU,CAAC4B,OAAO,IAAIhB,aAAa,iBAC5CR,OAAA,CAACH,IAAI;MAACc,UAAU,EAAEA;IAAW;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAClB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEd,CAAC;AAAAf,EAAA,CA/BKF,IAAI;AAAAyB,EAAA,GAAJzB,IAAI;AAiCV,eAAeA,IAAI;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}